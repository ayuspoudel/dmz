diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml
index bba80c3..ee17519 100644
--- a/.github/workflows/release.yml
+++ b/.github/workflows/release.yml
@@ -1,4 +1,4 @@
-name: Release dotmanz
+name: Release dmz
 
 on:
   push:
@@ -29,9 +29,9 @@ jobs:
           mkdir -p target/universal
           cargo build --release --target aarch64-apple-darwin
           cargo build --release --target x86_64-apple-darwin
-          lipo -create -output target/universal/dotmanz \
-            target/aarch64-apple-darwin/release/dotmanz \
-            target/x86_64-apple-darwin/release/dotmanz
+          lipo -create -output target/universal/dmz \
+            target/aarch64-apple-darwin/release/dmz \
+            target/x86_64-apple-darwin/release/dmz
       
       - name: Patch install.sh with current version
         run: |
@@ -41,21 +41,21 @@ jobs:
       - name: Generate ZSH completions
         run: |
           mkdir -p target/completions
-          ./target/universal/dotmanz completions zsh > target/completions/_dotmanz
+          ./target/universal/dmz completions zsh > target/completions/_dmz
 
       - name: Prepare release directory
         run: |
-          mkdir -p package/dotmanz-${{ github.ref_name }}/completions
-          cp target/universal/dotmanz package/dotmanz-${{ github.ref_name }}/
-          cp install.sh package/dotmanz-${{ github.ref_name }}/
-          cp README.md package/dotmanz-${{ github.ref_name }}/ || true
-          cp -r zsh package/dotmanz-${{ github.ref_name }}/
-          cp target/completions/_dotmanz package/dotmanz-${{ github.ref_name }}/completions/
+          mkdir -p package/dmz-${{ github.ref_name }}/completions
+          cp target/universal/dmz package/dmz-${{ github.ref_name }}/
+          cp install.sh package/dmz-${{ github.ref_name }}/
+          cp README.md package/dmz-${{ github.ref_name }}/ || true
+          cp -r zsh package/dmz-${{ github.ref_name }}/
+          cp target/completions/_dmz package/dmz-${{ github.ref_name }}/completions/
 
       - name: Create release tar.gz
         run: |
           cd package
-          tar -czf dotmanz-${{ github.ref_name }}.tar.gz dotmanz-${{ github.ref_name }}
+          tar -czf dmz-${{ github.ref_name }}.tar.gz dmz-${{ github.ref_name }}
 
       - name: Generate release notes
         run: |
@@ -63,20 +63,20 @@ jobs:
           if [ -f CHANGELOG.md ]; then
             awk "/^## $TAG/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md > body.md
             if [ ! -s body.md ]; then
-              echo "## dotmanz $TAG" > body.md
+              echo "## dmz $TAG" > body.md
               git log --oneline $(git describe --tags --abbrev=0 HEAD^)..HEAD >> body.md
             fi
           else
-            echo "## dotmanz $TAG" > body.md
+            echo "## dmz $TAG" > body.md
             echo "- Built from commit ${{ github.sha }}" >> body.md
           fi
 
       - name: Upload GitHub release
         uses: softprops/action-gh-release@v1
         with:
-          name: dotmanz ${{ github.ref_name }}
+          name: dmz ${{ github.ref_name }}
           tag_name: ${{ github.ref_name }}
           body_path: body.md
-          files: package/dotmanz-${{ github.ref_name }}.tar.gz
+          files: package/dmz-${{ github.ref_name }}.tar.gz
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml
index 1f72a70..9545395 100644
--- a/.github/workflows/test.yml
+++ b/.github/workflows/test.yml
@@ -1,4 +1,4 @@
-name: Test dotmanz
+name: Test dmz
 
 on:
   push:
@@ -34,4 +34,4 @@ jobs:
       - name: Verify help command works
         run: |
           cargo build --release
-          ./target/release/dotmanz --help
+          ./target/release/dmz --help
diff --git a/.gitignore b/.gitignore
index b672751..d7a53d7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -77,3 +77,6 @@ install.log
 
 # === Ignore compiled CLI output ===
 /dot/dot
+dmz
+dmz.exe
+.dmz/
\ No newline at end of file
diff --git a/README.md b/README.md
index dfe5ed6..823637a 100644
--- a/README.md
+++ b/README.md
@@ -1,24 +1,24 @@
-# dotmanz
+# dmz
 
-[![Build dotmanz](https://github.com/ayuspoudel/dotmanz/actions/workflows/build.yml/badge.svg)](https://github.com/ayuspoudel/dotmanz/actions/workflows/build.yml)
-[![Test dotmanz](https://github.com/ayuspoudel/dotmanz/actions/workflows/test.yml/badge.svg)](https://github.com/ayuspoudel/dotmanz/actions/workflows/test.yml)
-[![Release dotmanz](https://github.com/ayuspoudel/dotmanz/actions/workflows/release.yml/badge.svg)](https://github.com/ayuspoudel/dotmanz/actions/workflows/release.yml)\
+[![Build dmz](https://github.com/ayuspoudel/dmz/actions/workflows/build.yml/badge.svg)](https://github.com/ayuspoudel/dmz/actions/workflows/build.yml)
+[![Test dmz](https://github.com/ayuspoudel/dmz/actions/workflows/test.yml/badge.svg)](https://github.com/ayuspoudel/dmz/actions/workflows/test.yml)
+[![Release dmz](https://github.com/ayuspoudel/dmz/actions/workflows/release.yml/badge.svg)](https://github.com/ayuspoudel/dmz/actions/workflows/release.yml)\
 A modern, Rust-powered CLI tool to manage modular ZSH configuration files.
 
 ## Overview
 
-`dotmanz` is a command-line utility that helps developers organize, edit, and interact with modular `.zsh` files through an intuitive CLI experience. Instead of manually editing config files, you can now use commands like:
+`dmz` is a command-line utility that helps developers organize, edit, and interact with modular `.zsh` files through an intuitive CLI experience. Instead of manually editing config files, you can now use commands like:
 
 ```bash
-dotmanz list
+dmz list
 ```
 
 ```bash
-dotmanz add aws
+dmz add aws
 ```
 
 ```bash
-dotmanz edit git
+dmz edit git
 ```
 
 ## Features (v2.0.0+)
diff --git a/dev.sh b/dev.sh
index f990812..d7a1c07 100755
--- a/dev.sh
+++ b/dev.sh
@@ -4,27 +4,27 @@ set -e
 # Define paths
 ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
 TEST_HOME="$ROOT_DIR/test-env"
-DOTMANZ_BIN="$ROOT_DIR/target/debug/dotmanz"
+dmz_BIN="$ROOT_DIR/target/debug/dmz"
 FAKE_ZSHRC="$TEST_HOME/.zshrc"
-FAKE_DOTMANZ="$TEST_HOME/.dotmanz"
+FAKE_dmz="$TEST_HOME/.dmz"
 
 # Rebuild the CLI
-echo "[üîß] Building dotmanz..."
+echo "[üîß] Building dmz..."
 cargo build
 
 # Prepare test directories
-mkdir -p "$FAKE_DOTMANZ/zsh"
-mkdir -p "$FAKE_DOTMANZ/completions"
+mkdir -p "$FAKE_dmz/zsh"
+mkdir -p "$FAKE_dmz/completions"
 
 # Create a clean .zshrc if it doesn't exist
 if [ ! -f "$FAKE_ZSHRC" ]; then
-  echo "# dotmanz sandbox .zshrc" > "$FAKE_ZSHRC"
-  echo "for f in \$HOME/.dotmanz/zsh/*.zsh; do source \"\$f\"; done" >> "$FAKE_ZSHRC"
-  echo "fpath+=\$HOME/.dotmanz/completions" >> "$FAKE_ZSHRC"
+  echo "# dmz sandbox .zshrc" > "$FAKE_ZSHRC"
+  echo "for f in \$HOME/.dmz/zsh/*.zsh; do source \"\$f\"; done" >> "$FAKE_ZSHRC"
+  echo "fpath+=\$HOME/.dmz/completions" >> "$FAKE_ZSHRC"
   echo "autoload -Uz compinit && compinit" >> "$FAKE_ZSHRC"
 fi
 
-# Run dotmanz with test HOME
-echo "[üöÄ] Running dotmanz in sandbox:"
+# Run dmz with test HOME
+echo "[üöÄ] Running dmz in sandbox:"
 echo "HOME=$TEST_HOME"
-HOME="$TEST_HOME" "$DOTMANZ_BIN" "$@"
+HOME="$TEST_HOME" "$dmz_BIN" "$@"
diff --git a/install.sh b/install.sh
index d5c23de..1c6e188 100755
--- a/install.sh
+++ b/install.sh
@@ -9,21 +9,21 @@ RED="\033[0;31m"
 RESET="\033[0m"
 
 # Paths
-INSTALL_DIR="$HOME/.dotmanz"
-INSTALL_BIN="$INSTALL_DIR/dotmanz"
-SYSTEM_BIN="/usr/local/bin/dotmanz"
+INSTALL_DIR="$HOME/.dmz"
+INSTALL_BIN="$INSTALL_DIR/dmz"
+SYSTEM_BIN="/usr/local/bin/dmz"
 ZSHRC="$HOME/.zshrc"
 
 # GitHub release info
-REPO="ayuspoudel/dotmanz"
+REPO="ayuspoudel/dmz"
 VERSION="${VERSION:-v2.0.5}"
-TAR_URL="https://github.com/$REPO/releases/download/$VERSION/dotmanz-$VERSION.tar.gz"
+TAR_URL="https://github.com/$REPO/releases/download/$VERSION/dmz-$VERSION.tar.gz"
 
 # Step 1: Prepare target
 mkdir -p "$INSTALL_DIR"
 
 # Step 2: Download and extract binary
-echo -e "${YELLOW}Downloading dotmanz binary...${RESET}"
+echo -e "${YELLOW}Downloading dmz binary...${RESET}"
 if ! curl -sL "$TAR_URL" | tar -xz --strip-components=1 -C "$INSTALL_DIR"; then
   echo -e "${RED}‚ùå Failed to extract tarball from $TAR_URL${RESET}"
   exit 1
@@ -35,15 +35,15 @@ chmod +x "$INSTALL_BIN"
 # Step 4: Copy ZSH modules
 echo -e "${YELLOW}Copying ZSH modules...${RESET}"
 curl -sL "https://github.com/$REPO/archive/refs/heads/version-1.tar.gz" \
-  | tar -xz --strip-components=2 -C "$INSTALL_DIR" "dotmanz-version-1/zsh"
+  | tar -xz --strip-components=2 -C "$INSTALL_DIR" "dmz-version-1/zsh"
 
 # Step 5: Link to /usr/local/bin
 echo -e "${YELLOW}Linking CLI to /usr/local/bin...${RESET}"
 sudo ln -sf "$INSTALL_BIN" "$SYSTEM_BIN"
 
 # Step 6: Patch .zshrc
-HEADER_LINE="# dotmanz module loader"
-SOURCE_LINE='for f in $HOME/.dotmanz/zsh/*.zsh; do source "$f"; done'
+HEADER_LINE="# dmz module loader"
+SOURCE_LINE='for f in $HOME/.dmz/zsh/*.zsh; do source "$f"; done'
 
 if grep -Fq "$SOURCE_LINE" "$ZSHRC"; then
   echo -e "${YELLOW}Notice:${RESET} .zshrc already configured."
@@ -56,7 +56,7 @@ fi
 # Step 7: Install ZSH shell completions
 echo -e "${YELLOW}Installing shell completions...${RESET}"
 mkdir -p "$HOME/.zsh/completions"
-cp "$INSTALL_DIR/completions/_dotmanz" "$HOME/.zsh/completions/"
+cp "$INSTALL_DIR/completions/_dmz" "$HOME/.zsh/completions/"
 
 # Patch .zshrc to load completions if not already set
 if ! grep -Fq 'fpath+=~/.zsh/completions' "$ZSHRC"; then
@@ -66,6 +66,6 @@ if ! grep -Fq 'fpath+=~/.zsh/completions' "$ZSHRC"; then
 fi
 
 # Done
-echo -e "\n${GREEN}dotmanz installed successfully!${RESET}"
+echo -e "\n${GREEN}dmz installed successfully!${RESET}"
 echo -e "${YELLOW}Run:${RESET} source ~/.zshrc"
-echo -e "${YELLOW}Try:${RESET} dotmanz list"
+echo -e "${YELLOW}Try:${RESET} dmz list"
diff --git a/src/commands/add.rs b/src/commands/add.rs
index b3fb148..3627546 100644
--- a/src/commands/add.rs
+++ b/src/commands/add.rs
@@ -123,7 +123,7 @@ fn open_editor(path: &Path, should_refresh: bool) {
             refresh::run();
             println!("{} Run: source ~/.zshrc to apply changes", "‚û§".yellow());
         } else {
-            println!("{} You must run 'dotmanz refresh' and 'source ~/.zshrc' to apply changes.", "‚ö†Ô∏è".yellow());
+            println!("{} You must run 'dmz refresh' and 'source ~/.zshrc' to apply changes.", "‚ö†Ô∏è".yellow());
         }
     } else {
         eprintln!("{} Failed to edit {}", "Error:".red(), path.display());
